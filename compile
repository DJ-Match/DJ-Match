#!/usr/bin/env bash

########################################################################
# Copyright (C) 2021, 2022 : Kathrin Hanauer, Jonathan Trummer         #
#                                                                      #
# This file is part of DJMatch and licensed under GPLv3.               #
########################################################################

set -e

export QT_SELECT=qt5
PRO_FILE="DJMatch.pro"

CLEAN=0
EXTRA_ARGS=""
QMAKE=""
SPEC=""

function usage() {
    echo "Usage: $0 [ --qmake <path/to/qmake> ] [ -c | --clean ] [ -g | --general ] [ -d | --debugsymbols] [ -C | --compiler <compiler> ] [ -A | --ar <archive-cmd> ] [ -S | --spec <spec> ]"
}

while [ $# -gt 0 ]
do
case $1 in
    --qmake)
    QMAKE="$2"
    shift
    shift
    ;;
    -c|--clean)
    CLEAN=1
    shift
    ;;
    -g|--general)
    EXTRA_ARGS="${EXTRA_ARGS} CONFIG+=general" # do not optimize for this cpu only
    shift
    ;;
    -d|--debugsymbols)
    EXTRA_ARGS="${EXTRA_ARGS} CONFIG+=debugsymbols" # add debug symbols in release version
    shift
    ;;
    -C|--compiler)
    EXTRA_ARGS="${EXTRA_ARGS} QMAKE_CXX=$2"
    shift
    shift
    ;;
    -A|--ar)
    EXTRA_ARGS="${EXTRA_ARGS} CONFIG+=custom-ar QMAKE_AR=$2"
    shift
    shift
    ;;
    -S|--spec)
    SPEC="$2"
    shift
    shift
    ;;
    -h|--help)
    usage
    exit 0
    ;;
    --)
    shift
    break
    ;;
    *)
    echo "Ignoring unknown option $1. Run $0 -h for help."
    shift
    ;;
esac
done

[ -z "${QMAKE}" ] && QMAKE=$(which qmake 2>/dev/null) && echo "Using \"${QMAKE}\" for \"qmake\"."
[ -z "${QMAKE}" ] && QMAKE=$(which qmake-qt5 2>/dev/null) && echo "Using \"${QMAKE}\" for \"qmake\"."
[ -n "${QMAKE}" ] || eval 'echo "Binary \"qmake\" or \"qmake-qt5\" not found. Please specify its location explicitly via --qmake <path/to/qmake>." 1>&2; exit 1'
[ -x "${QMAKE}" ] || eval 'echo "\"${QMAKE}\" is not an executable. Please specify the location of the qmake binary explicitly via --qmake <path/to/qmake>." 1>&2; exit 1'

if [ -z "${SPEC}" ]
then
	SPEC=$(qmake -query QMAKE_SPEC)
fi
[ -n "${SPEC}" ] || eval 'echo "Could not determine QMake SPEC to use. Please specify manually via --spec <SPEC>." 1>&2; exit 1'

echo "Using QMake spec ${SPEC}."

QMAKE_ARGS="-r -spec ${SPEC} ${EXTRA_ARGS} $@"
QMAKE_ARGS_DEBUG="CONFIG+=debug"


CUR_DIR=$(pwd)
BUILD_DIR="${CUR_DIR}/build"
BUILD_DIR_DEBUG="${BUILD_DIR}/Debug"
BUILD_DIR_RELEASE="${BUILD_DIR}/Release"

PRO_PATH="${CUR_DIR}/src/${PRO_FILE}"

if [ "${CLEAN}" -gt 0 ]
then
  echo "Removing build directory as requested..."
  rm -rf ${BUILD_DIR}
fi

echo "Creating build paths if necessary..."
mkdir -p "${BUILD_DIR_DEBUG}"
mkdir -p "${BUILD_DIR_RELEASE}"

echo "Compiling debug version..."
cd "${BUILD_DIR_DEBUG}"
${QMAKE} ${PRO_PATH} ${QMAKE_ARGS} ${QMAKE_ARGS_DEBUG} && make

echo "Compiling release version..."
cd "${BUILD_DIR_RELEASE}"
${QMAKE} ${PRO_PATH} ${QMAKE_ARGS} && make

cd "${CUR_DIR}"
